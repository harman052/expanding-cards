{"version":3,"sources":["data.js","CommonFunctions.js","Cards.js","OpenContent.js","App.js","serviceWorker.js","index.js"],"names":["data","cards","imgSrc","heading","colNum","totalColumns","paragraphText","setCoverPosition","cardPosition","state","cover","style","left","top","width","height","scaleCoverToFillWindow","windowWidth","windowHeight","scaleX","scaleY","offsetX","offsetY","transform","concat","animateCoverUp","card","openContentText","openContentImage","pageIsOpen","getBoundingClientRect","cardStyle","getComputedStyle","backgroundColor","setCoverColor","innerHTML","children","textContent","src","setTimeout","window","scroll","animateCoverBack","currentCard","className","replace","animateOutCard","delay","animateInCard","animateOtherCards","out","nCards","length","i","Cards","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onCardClick","e","openContent","currentTarget","updateState","generateCards","map","item","index","cardClass","push","react_default","a","createElement","key","onClick","alt","generateCols","cols","columnClass","bind","assertThisInitialized","Fragment","Component","OpenContent","onCloseClick","_this$props$state","id","href","App","args","setState","objectSpread","closeContent","_this$state","_this$state2","readOnlyError","innerWidth","innerHeight","resize","_this$state3","document","getElementsByClassName","getElementById","myInit","_this2","src_Cards","src_OpenContent","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.205ba453.chunk.js","sourcesContent":["const data = {\n  cards: [\n    {\n      imgSrc:\n        \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/53148/deathtostock-00.jpg\",\n      heading: \"Hey now, you're an allstar\",\n      colNum: 0\n    },\n    {\n      imgSrc:\n        \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/53148/deathtostock-02.jpg\",\n      heading: \"Hey now, you're a rock star\",\n      colNum: 0\n    },\n    {\n      imgSrc:\n        \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/53148/deathtostock-01.jpg\",\n      heading: \"Get your game on, go play\",\n      colNum: 1\n    },\n    {\n      imgSrc:\n        \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/53148/deathtostock-03.jpg\",\n      heading: \"Get the show on, get paid\",\n      colNum: 1\n    }\n  ],\n  totalColumns: 2,\n  paragraphText: `<p>Somebody once told me the world is gonna roll me.\n  I ain't the sharpest tool in the shed. She was looking\n  kind of dumb with her finger and her thumb in the shape\n  of an \"L\" on her forehead. Well the years start coming\n  and they don't stop coming. Fed to the rules and I hit the\n   ground running. Didn't make sense not to live for fun.\n   Your brain gets smart but your head gets dumb. So much to do,\n   so much to see. So what's wrong with taking the back streets?\n    You'll never know if you don't go. You'll never shine if you\n    don't glow.</p><p>Hey now, you're an all-star, get your game on,\n    go play. Hey now, you're a rock star, get the show on, get paid.\n    And all that glitters is gold. Only shooting stars break the\n    mold.</p><p>It's a cool place and they say it gets colder.\n    You're bundled up now, wait till you get older.\n    But the meteor men beg to differ. Judging by the hole in the\n    satellite picture. The ice we skate is getting pretty thin.\n     The water's getting warm so you might as well swim.\n     My world's on fire, how about yours?\n     That's the way I like it and I never get bored.</p>`\n};\n\nexport default data;\n","import data from \"./data\";\nexport const setCoverPosition = (cardPosition, state) => {\n  const { cover } = state;\n  // Style the cover so it is in exactly the same position as the card\n  cover.style.left = cardPosition.left + \"px\";\n  cover.style.top = cardPosition.top + \"px\";\n  cover.style.width = cardPosition.width + \"px\";\n  cover.style.height = cardPosition.height + \"px\";\n};\n\nexport const setCoverColor = (cardStyle, state) => {\n  const { cover } = state;\n  // Style the cover to be the same color as the card\n  cover.style.backgroundColor = cardStyle.backgroundColor;\n};\n\nexport const scaleCoverToFillWindow = (cardPosition, state) => {\n  const { cover, windowWidth, windowHeight } = state;\n  // Calculate the scale and position for the card to fill the page,\n  const scaleX = windowWidth / cardPosition.width;\n  const scaleY = windowHeight / cardPosition.height;\n  const offsetX =\n    (windowWidth / 2 - cardPosition.width / 2 - cardPosition.left) / scaleX;\n  const offsetY =\n    (windowHeight / 2 - cardPosition.height / 2 - cardPosition.top) / scaleY;\n  // Set the transform on the cover - it will animate because of the transition set on it in the CSS\n  cover.style.transform = `scaleX(${scaleX}) scaleY(${scaleY}) translate3d(${offsetX}px, ${offsetY}px, 0px)`;\n};\n\n/*\n * This effect is created by taking a separate 'cover' div, placing\n * it in the same position as the clicked card, and animating it to\n * become the background of the opened 'page'.\n * It looks like the card itself is animating in to the background,\n * but doing it this way is more performant (because the cover div is\n * absolutely positioned and has no children), and there's just less\n * having to deal with z-index and other elements in the card\n */\nexport const animateCoverUp = (card, state) => {\n  let { openContentText, openContentImage, pageIsOpen } = state;\n  // Get the position of the clicked card\n  let cardPosition = card.getBoundingClientRect();\n  // Get the style of the clicked card\n  let cardStyle = getComputedStyle(card);\n  setCoverPosition(cardPosition, state);\n  setCoverColor(cardStyle, state);\n  scaleCoverToFillWindow(cardPosition, state);\n  // Update the content of the opened page\n  openContentText.innerHTML =\n    \"<h1>\" + card.children[2].textContent + \"</h1>\" + data.paragraphText;\n  openContentImage.src = card.children[1].src;\n  setTimeout(() => {\n    // Update the scroll position to 0 (so it is at the top of the 'opened' page)\n    window.scroll(0, 0);\n    // set page to open\n    pageIsOpen = true;\n  }, 300);\n};\n\nexport const animateCoverBack = (card, state) => {\n  const { cover, currentCard } = state;\n  let cardPosition = card.getBoundingClientRect();\n\n  /**\n   * the original card may be in a different position,\n   * because of scrolling, so the cover position needs to\n   * be reset before scaling back down\n   */\n  setCoverPosition(cardPosition, state);\n  scaleCoverToFillWindow(cardPosition, state);\n  // animate scale back to the card size and position\n  cover.style.transform = `scaleX(1) scaleY(1) translate3d(0px, 0px, 0px)`;\n  setTimeout(() => {\n    const { cover, openContentText, openContentImage, currentCard } = state;\n    let { pageIsOpen } = state;\n    // set content back to empty\n    openContentText.innerHTML = \"\";\n    openContentImage.src = \"\";\n    // style the cover to 0x0 so it is hidden\n    cover.style.width = \"0px\";\n    cover.style.height = \"0px\";\n    pageIsOpen = false;\n    // remove the clicked class so the card animates back in\n    currentCard.className = currentCard.className.replace(\" clicked\", \"\");\n  }, 301);\n};\n\n// animations on individual cards (by adding/removing card names)\nexport const animateOutCard = (card, delay) => {\n  setTimeout(function() {\n    card.className += \" out\";\n  }, delay);\n};\n\nexport const animateInCard = (card, delay) => {\n  setTimeout(function() {\n    card.className = card.className.replace(\" out\", \"\");\n  }, delay);\n};\n\nexport const animateOtherCards = (card, out, state) => {\n  const { cards } = state;\n  let delay = 100;\n  let nCards = cards.length;\n  for (let i = 0; i < nCards; i++) {\n    // animate cards on a stagger, 1 each 100ms\n    if (cards[i] === card) continue;\n    if (out) animateOutCard(cards[i], delay);\n    else animateInCard(cards[i], delay);\n    delay += 100;\n  }\n};\n","import React, { Component } from \"react\";\nimport { animateCoverUp, animateOtherCards } from \"./CommonFunctions\";\nimport data from \"./data\";\n\nclass Cards extends Component {\n  constructor(props) {\n    super(props);\n    this.animateCoverUp = animateCoverUp.bind(this);\n    this.animateOtherCards = animateOtherCards.bind(this);\n  }\n\n  /* When a card is clicked */\n  onCardClick = (state, e) => {\n    let { currentCard, openContent } = state;\n    // set the current card\n    currentCard = e.currentTarget;\n    // add the 'clicked' class to the card, so it animates out\n    currentCard.className += \" clicked\";\n    // animate the card 'cover' after a 500ms delay\n    setTimeout(() => {\n      this.animateCoverUp(currentCard, state);\n    }, 500);\n    // animate out the other cards\n    this.animateOtherCards(currentCard, true, state);\n    // add the open class to the page content\n    //openContent = document.getElementById(\"open-content\");\n    openContent.className += \" open\";\n    this.props.updateState({ currentCard, openContent });\n  };\n\n  generateCards = (colNum, state) => {\n    let card = [];\n    /**\n     * Iterate over each of the items (cards) and match\n     * their \"colNum\" property with the argument (colNum)\n     * passed. If matched, it means current card belongs\n     * to column number passed as argument. Then, card is\n     * wrapped into its wrapper class and pushed as an\n     * element into an array, which is returned from arrow\n     * function to parent function.\n     */\n    data.cards.map((item, index) => {\n      if (item.colNum === colNum) {\n        let cardClass = `card card-color-${index}`;\n        card.push(\n          <div\n            key={index}\n            className={cardClass}\n            onClick={e => this.onCardClick(state, e)}\n          >\n            <div className=\"border\" />\n            <img src={item.imgSrc} alt=\"\" />\n            <h1>{item.heading}</h1>\n          </div>\n        );\n      }\n      // Returning from arrow function\n      return card;\n    });\n    // Returning from parent function\n    return card;\n  };\n\n  generateCols = state => {\n    let cols = [];\n    /**\n     * Call generateCards methods for each\n     * of the columns.\n     */\n    for (let i = 0; i < data.totalColumns; i++) {\n      let columnClass = `card-column column-${i}`;\n      cols.push(\n        <div key={i} className={columnClass}>\n          {this.generateCards(i, state)}\n        </div>\n      );\n    }\n    return cols;\n  };\n  render() {\n    return <>{this.generateCols(this.props.state)}</>;\n  }\n}\n\nexport default Cards;\n","import React, { Component } from \"react\";\nimport { animateCoverBack, animateOtherCards } from \"./CommonFunctions\";\n\nclass OpenContent extends Component {\n  constructor(props) {\n    super(props);\n    this.animateCoverBack = animateCoverBack.bind(this);\n    this.animateOtherCards = animateOtherCards.bind(this);\n  }\n\n  onCloseClick = () => {\n    const { openContent, currentCard } = this.props.state;\n    // remove the open class so the page content animates out\n    openContent.className = openContent.className.replace(\" open\", \"\");\n    // animate the cover back to the original position card and size\n    this.animateCoverBack(currentCard, this.props.state);\n    // animate in other cards\n    this.animateOtherCards(currentCard, false, this.props.state);\n  };\n\n  render() {\n    return (\n      <div id=\"open-content\" className=\"open-content\">\n        <a\n          href=\"#\"\n          id=\"close-content\"\n          className=\"close-content\"\n          onClick={this.onCloseClick}\n        >\n          <span className=\"x-1\" />\n          <span className=\"x-2\" />\n        </a>\n        <img id=\"open-content-image\" src=\"\" alt=\"\" />\n        <div className=\"text\" id=\"open-content-text\" />\n      </div>\n    );\n  }\n}\n\nexport default OpenContent;\n","import React, { Component } from \"react\";\nimport Cards from \"./Cards\";\nimport OpenContent from \"./OpenContent\";\nimport { animateCoverBack, animateOtherCards } from \"./CommonFunctions\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: \"\",\n      cover: \"\",\n      openContent: \"\",\n      openContentText: \"\",\n      pageIsOpen: false,\n      openContentImage: \"\",\n      closeContent: \"\",\n      windowWidth: null,\n      windowHeight: null,\n      currentCard: {}\n    };\n    this.animateCoverBack = animateCoverBack.bind(this);\n    this.animateOtherCards = animateOtherCards.bind(this);\n  }\n\n  // resize function - records the window width and height\n  resize() {\n    const { pageIsOpen, cardPosition, currentCard } = this.state;\n    let { windowWidth, windowHeight } = this.state;\n\n    if (pageIsOpen) {\n      // update position of cover\n      cardPosition = currentCard.getBoundingClientRect();\n      this.setCoverPosition(cardPosition);\n      this.scaleCoverToFillWindow(cardPosition);\n    }\n    windowWidth = window.innerWidth;\n    windowHeight = window.innerHeight;\n    this.updateState({\n      pageIsOpen,\n      currentCard,\n      windowWidth,\n      windowHeight\n    });\n  }\n\n  myInit() {\n    this.resize();\n    let {\n      cards,\n      cover,\n      openContent,\n      openContentText,\n      openContentImage,\n      closeContent\n    } = this.state;\n\n    cards = document.getElementsByClassName(\"card\");\n    cover = document.getElementById(\"cover\");\n    openContent = document.getElementById(\"open-content\");\n    openContentText = document.getElementById(\"open-content-text\");\n    openContentImage = document.getElementById(\"open-content-image\");\n    closeContent = document.getElementById(\"close-content\");\n\n    this.updateState({\n      cards,\n      cover,\n      openContent,\n      openContentText,\n      openContentImage,\n      closeContent\n    });\n  }\n\n  updateState = function(args) {\n    this.setState({\n      ...args\n    });\n  };\n\n  componentDidMount() {\n    this.myInit();\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"container\">\n          <Cards\n            state={this.state}\n            updateState={args => this.updateState(args)}\n          />\n        </div>\n        <div id=\"cover\" className=\"cover\" />\n        <OpenContent state={this.state} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}